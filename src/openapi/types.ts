/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/product": {
    /**
     * Search products
     * All of the query parameters are listed as optional, but in reality exactly one parameter is required.
     * TODO: update specification to match.
     */
    get: operations["searchProducts"];
  };
  "/v1/product/{productId}": {
    /** Get product by productId, i.e {itemType}-{itemNo} */
    get: operations["getProductById"];
  };
}

export interface components {
  schemas: {
    Product: {
      /** ItemType-itemNo (PI-API ref, itemType and itemNo) */
      productId: string;
      /** (PIA-API ref, itemNameEn) */
      itemName: string;
      /** Type of product e.g shelf (PI-API ref, productType.productTypeName) */
      typeName: string;
      /** Name of the product (PI-API ref, productName.productName) */
      productName: string;
      /** Description of the product (PI-API ref, customerBenefitSummary.custBenText) */
      custBenText?: string;
      /** (PI-API ref, businessStructure.hfbName) */
      hfbName: string;
      /** (PI-API ref, attribute.requiresAssembly) */
      requiresAssembly?: boolean;
      /** Color (PI-API ref, validDesign.validDesignText) */
      validDesignText?: string;
      /** Must not be empty (PI-API ref, itemMedia) */
      itemMedia?: components["schemas"]["ItemMedia"][];
    };
    ItemMedia: {
      /** (PI-API ref, itemMedia.mediaContent.mediaTypeNo) */
      mediaTypeNo: string;
      /** Image quality S1-S5 (PI-API ref, itemMedia.mediaContent.mediaQuality) */
      mediaQuality: string;
      /** image link (PI-API ref, itemMedia.mediaContent._links.download.href) */
      href: string;
    };
    ProductSearch: {
      /** List of search results */
      items: components["schemas"]["Product"][];
    };
    ErrorMessage: {
      error?: {
        message?: string;
      };
    };
    DeletedMessage: {
      deleted?: string;
    };
  };
  responses: {
    /** Invalid or malformed input */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["ErrorMessage"];
      };
    };
    /** The specified resource was not found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["ErrorMessage"];
      };
    };
    /** Access token is missing or invalid. */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["ErrorMessage"];
      };
    };
    /** Access token is valid, but does not contain the roles required. */
    Forbidden: {
      content: {
        "application/json": components["schemas"]["ErrorMessage"];
      };
    };
    /** Deleted resource */
    Deleted: {
      content: {
        "application/json": components["schemas"]["DeletedMessage"];
      };
    };
  };
}

export interface operations {
  /**
   * Search products
   * All of the query parameters are listed as optional, but in reality exactly one parameter is required.
   * TODO: update specification to match.
   */
  searchProducts: {
    parameters: {
      query: {
        /** Search products by product name */
        productName?: string;
        /** Search products by generic terms */
        terms?: string[];
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ProductSearch"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
    };
  };
  /** Get product by productId, i.e {itemType}-{itemNo} */
  getProductById: {
    parameters: {
      path: {
        /** Product Id, in {itemType}-{itemNo} format */
        productId: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Product"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
    };
  };
}
